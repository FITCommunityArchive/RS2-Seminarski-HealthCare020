// <auto-generated />
using System;
using HealthCare020.Repository;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace HealthCare020.Repository.Migrations
{
    [DbContext(typeof(HealthCare020DbContext))]
    partial class HealthCare020DbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("HealthCare020.Core.Entities.Doktor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("NaucnaOblastId")
                        .HasColumnType("int");

                    b.Property<int>("RadnikId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NaucnaOblastId");

                    b.HasIndex("RadnikId");

                    b.ToTable("Doktori");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            NaucnaOblastId = 1,
                            RadnikId = 1
                        },
                        new
                        {
                            Id = 2,
                            NaucnaOblastId = 2,
                            RadnikId = 4
                        });
                });

            modelBuilder.Entity("HealthCare020.Core.Entities.Drzava", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Naziv")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<string>("PozivniBroj")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Drzave");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Naziv = "Bosna i Hercegovina",
                            PozivniBroj = "387"
                        },
                        new
                        {
                            Id = 2,
                            Naziv = "Srbija",
                            PozivniBroj = "381"
                        },
                        new
                        {
                            Id = 3,
                            Naziv = "Crna Gora",
                            PozivniBroj = "382"
                        });
                });

            modelBuilder.Entity("HealthCare020.Core.Entities.Grad", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DrzavaId")
                        .HasColumnType("int");

                    b.Property<string>("Naziv")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.HasIndex("DrzavaId");

                    b.ToTable("Gradovi");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DrzavaId = 1,
                            Naziv = "Sarajevo"
                        },
                        new
                        {
                            Id = 2,
                            DrzavaId = 1,
                            Naziv = "Mostar"
                        },
                        new
                        {
                            Id = 3,
                            DrzavaId = 1,
                            Naziv = "Zenica"
                        },
                        new
                        {
                            Id = 4,
                            DrzavaId = 1,
                            Naziv = "Visoko"
                        },
                        new
                        {
                            Id = 5,
                            DrzavaId = 1,
                            Naziv = "Goražde"
                        },
                        new
                        {
                            Id = 6,
                            DrzavaId = 2,
                            Naziv = "Novi Pazar"
                        },
                        new
                        {
                            Id = 7,
                            DrzavaId = 2,
                            Naziv = "Beograd"
                        },
                        new
                        {
                            Id = 8,
                            DrzavaId = 2,
                            Naziv = "Novi Sad"
                        },
                        new
                        {
                            Id = 9,
                            DrzavaId = 2,
                            Naziv = "Subotica"
                        },
                        new
                        {
                            Id = 10,
                            DrzavaId = 2,
                            Naziv = "Kraljevo"
                        },
                        new
                        {
                            Id = 11,
                            DrzavaId = 3,
                            Naziv = "Podgorica"
                        },
                        new
                        {
                            Id = 12,
                            DrzavaId = 3,
                            Naziv = "Budva"
                        },
                        new
                        {
                            Id = 13,
                            DrzavaId = 3,
                            Naziv = "Tivat"
                        });
                });

            modelBuilder.Entity("HealthCare020.Core.Entities.KorisnickiNalog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("FaceId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastOnline")
                        .HasColumnType("datetime2");

                    b.Property<bool>("LockedOut")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LockedOutUntil")
                        .HasColumnType("datetime2");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordSalt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.ToTable("KorisnickiNalozi");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTime(2020, 8, 16, 23, 19, 42, 588, DateTimeKind.Local).AddTicks(4903),
                            LastOnline = new DateTime(2020, 8, 16, 23, 19, 42, 588, DateTimeKind.Local).AddTicks(5557),
                            LockedOut = false,
                            PasswordHash = "iPJ5vFIsAGKcK9HrpZMAnR+BBQZBd7GTzFExGl5SYRPpyOG0gNdbE+gRYObnVUCOwSApOZ3YJeAi+W7czi2Bpg==",
                            PasswordSalt = "UqPQpoPgauVaAn8NWweDvA==",
                            Username = "admin"
                        },
                        new
                        {
                            Id = 2,
                            DateCreated = new DateTime(2020, 8, 16, 23, 19, 42, 590, DateTimeKind.Local).AddTicks(6325),
                            LastOnline = new DateTime(2020, 8, 16, 23, 19, 42, 590, DateTimeKind.Local).AddTicks(6349),
                            LockedOut = false,
                            PasswordHash = "EtejxuT8onWPEsyIKavD4k8GdGun2scA0V4JNlyxcV6oKw5HkGcEzEIHJ2TDo96wUjqjhYyRhP8NM33bm/xnFA==",
                            PasswordSalt = "fBIhqQ1z2Akj5HDTqfPTMw==",
                            Username = "doktor"
                        },
                        new
                        {
                            Id = 3,
                            DateCreated = new DateTime(2020, 8, 16, 23, 19, 42, 590, DateTimeKind.Local).AddTicks(6656),
                            LastOnline = new DateTime(2020, 8, 16, 23, 19, 42, 590, DateTimeKind.Local).AddTicks(6662),
                            LockedOut = false,
                            PasswordHash = "tNbjarghbR5SEeS4HxCcnINt9NhObdIlTzLW9fhRtS6MNULHw4LLy2AWqNwTyblqWnVr/VpkJjUnR3wd90BtqA==",
                            PasswordSalt = "YJdBUgkwrm8l3bz3y1g14w==",
                            Username = "radnikprijem"
                        },
                        new
                        {
                            Id = 4,
                            DateCreated = new DateTime(2020, 8, 16, 23, 19, 42, 590, DateTimeKind.Local).AddTicks(6698),
                            LastOnline = new DateTime(2020, 8, 16, 23, 19, 42, 590, DateTimeKind.Local).AddTicks(6702),
                            LockedOut = false,
                            PasswordHash = "3FXd+GEud1oiiorvbKVeSps3r0CYQ09n4FHVY91WtnFMKumBfm5z9ohnxLMfCTd//zlzmX+JHKXD59Mbgy0+KQ==",
                            PasswordSalt = "iY2NjlgzhqdTU23hmiZ0+A==",
                            Username = "pacijent"
                        },
                        new
                        {
                            Id = 5,
                            DateCreated = new DateTime(2020, 8, 16, 23, 19, 42, 590, DateTimeKind.Local).AddTicks(6728),
                            LastOnline = new DateTime(2020, 8, 16, 23, 19, 42, 590, DateTimeKind.Local).AddTicks(6731),
                            LockedOut = false,
                            PasswordHash = "c5xghhbG8tDfTeaf1+J8Se+o/IQ8fyxwWI3auWE/12YFHgHvPAsskRFihNbCklolnhCUiaZRY4xMBu3P9/esJw==",
                            PasswordSalt = "b1/8iNZLP1IaB+D1B3OUSQ==",
                            Username = "medicinskitehnicar"
                        },
                        new
                        {
                            Id = 6,
                            DateCreated = new DateTime(2020, 8, 16, 23, 19, 42, 590, DateTimeKind.Local).AddTicks(6757),
                            LastOnline = new DateTime(2020, 8, 16, 23, 19, 42, 590, DateTimeKind.Local).AddTicks(6760),
                            LockedOut = false,
                            PasswordHash = "7nYe6cwHlFIx6NiY7PfT6rakig9M6l3wuOI1Gfz9O9/vXrAAFCJQONyK/IQ+ZGNvx93BFo1L6NpC+BcFVcQ5jQ==",
                            PasswordSalt = "beuy+nmSTVb/Ip5HGZVDXg==",
                            Username = "doktor2"
                        },
                        new
                        {
                            Id = 7,
                            DateCreated = new DateTime(2020, 8, 16, 23, 19, 42, 590, DateTimeKind.Local).AddTicks(6785),
                            LastOnline = new DateTime(2020, 8, 16, 23, 19, 42, 590, DateTimeKind.Local).AddTicks(6788),
                            LockedOut = false,
                            PasswordHash = "NNp+aaIvYRTFPh/R8J3XRchCfKMrQr6pQcJB71TsnFTBYK4MHDi9UmlfyE7Hbuezb6XxsF4ygU1Lg0qvMFeIBw==",
                            PasswordSalt = "iajqnBG+Wr/AmeH5g/HJCQ==",
                            Username = "pacijent2"
                        },
                        new
                        {
                            Id = 8,
                            DateCreated = new DateTime(2020, 8, 16, 23, 19, 42, 590, DateTimeKind.Local).AddTicks(6812),
                            LastOnline = new DateTime(2020, 8, 16, 23, 19, 42, 590, DateTimeKind.Local).AddTicks(6816),
                            LockedOut = false,
                            PasswordHash = "5vnJS+az6ofCHGC/ftsC3qKDDA9P+zmUMe8oOlYHG89Vvfsr/C4guLe9BxWRr9HcSoewRKSXulY8KobG+iiP+g==",
                            PasswordSalt = "IaI82Nkz+GUZYhrrCOtq8g==",
                            Username = "pacijent3"
                        },
                        new
                        {
                            Id = 9,
                            DateCreated = new DateTime(2020, 8, 16, 23, 19, 42, 590, DateTimeKind.Local).AddTicks(6858),
                            LastOnline = new DateTime(2020, 8, 16, 23, 19, 42, 590, DateTimeKind.Local).AddTicks(6861),
                            LockedOut = false,
                            PasswordHash = "MPv23zJH32gaq4eg31kQWh03Y3c64Gs/hCC8zHhFi8lV2gcbbbcoFVqgEZZV9DWQcCkpZxQGn/9T1QkMav+auw==",
                            PasswordSalt = "vcJl/s4FVgK4eRnGzeUeFA==",
                            Username = "pacijent4"
                        },
                        new
                        {
                            Id = 10,
                            DateCreated = new DateTime(2020, 8, 16, 23, 19, 42, 590, DateTimeKind.Local).AddTicks(6888),
                            LastOnline = new DateTime(2020, 8, 16, 23, 19, 42, 590, DateTimeKind.Local).AddTicks(6891),
                            LockedOut = false,
                            PasswordHash = "B7QkuuUQRTretggCXMwXzorQrGMFV4jxDy6RiTIRtr8AoFO0Ax5+x9A3+0c9spsZNwxDi1eu3041dBucaw8Rzg==",
                            PasswordSalt = "K2S5f8XDrT45/kL6KN5Uyw==",
                            Username = "pacijent5"
                        },
                        new
                        {
                            Id = 11,
                            DateCreated = new DateTime(2020, 8, 16, 23, 19, 42, 590, DateTimeKind.Local).AddTicks(6940),
                            LastOnline = new DateTime(2020, 8, 16, 23, 19, 42, 590, DateTimeKind.Local).AddTicks(6944),
                            LockedOut = false,
                            PasswordHash = "a3FFgcrii2/tJguUpIeiByNNTwqyLv7V0XMKoOuQNliRv038lXmfoA7JlvAZWE8SPPQbq6+R2Xl/8i4kNEbxug==",
                            PasswordSalt = "nKebXrUqnT9nuQvopcJhXw==",
                            Username = "pacijent6"
                        },
                        new
                        {
                            Id = 12,
                            DateCreated = new DateTime(2020, 7, 16, 23, 19, 42, 590, DateTimeKind.Local).AddTicks(6968),
                            LastOnline = new DateTime(2020, 8, 16, 23, 19, 42, 590, DateTimeKind.Local).AddTicks(6998),
                            LockedOut = false,
                            PasswordHash = "mOU8tSAR6srd9gL8Ca/D2pY6z18Wfuatf6aG1kwyXBWuIdL2sTDVNTjgb1hyX//LQBDUia7+vHF/zkhpbR6yhg==",
                            PasswordSalt = "RgEs7OahRGDt4uD1Sz9AwQ==",
                            Username = "pacijent7"
                        },
                        new
                        {
                            Id = 13,
                            DateCreated = new DateTime(2020, 6, 16, 23, 19, 42, 590, DateTimeKind.Local).AddTicks(7024),
                            LastOnline = new DateTime(2020, 8, 16, 23, 19, 42, 590, DateTimeKind.Local).AddTicks(7028),
                            LockedOut = false,
                            PasswordHash = "Mr8MGTow/UWr3s0Xxa2cBr2/XZyF7AfkBkZG8O5evEOz3LTDVIInid1d4U6F64ILGEuuUH1w4ARl3dcBl0+g0w==",
                            PasswordSalt = "mkVqGI8oxf/kLamHeoGBKQ==",
                            Username = "pacijent8"
                        },
                        new
                        {
                            Id = 14,
                            DateCreated = new DateTime(2020, 6, 16, 23, 19, 42, 590, DateTimeKind.Local).AddTicks(7053),
                            LastOnline = new DateTime(2020, 8, 16, 23, 19, 42, 590, DateTimeKind.Local).AddTicks(7057),
                            LockedOut = false,
                            PasswordHash = "pTssS464IN5Sp97ulAXtaSY1AJgiEMmDLdFq7jusWWtRITsFxAs2kX35uSkk+WByYB9TYj2cpDXceDH1S2VEDg==",
                            PasswordSalt = "ftRPU4KpaRl9kIIaV9RWHA==",
                            Username = "pacijent9"
                        },
                        new
                        {
                            Id = 15,
                            DateCreated = new DateTime(2020, 4, 16, 23, 19, 42, 590, DateTimeKind.Local).AddTicks(7081),
                            LastOnline = new DateTime(2020, 8, 16, 23, 19, 42, 590, DateTimeKind.Local).AddTicks(7085),
                            LockedOut = false,
                            PasswordHash = "iemAcmH305fw7smSernvSx/S+uY+Oj/ykGrOEAe7piCfAotic7OzycjJvOHC2A6qCtlvswLM7z0bIYDg596SKA==",
                            PasswordSalt = "CxsMsjV2YKnC9ILmPAL2VQ==",
                            Username = "pacijent10"
                        },
                        new
                        {
                            Id = 16,
                            DateCreated = new DateTime(2020, 4, 16, 23, 19, 42, 590, DateTimeKind.Local).AddTicks(7110),
                            LastOnline = new DateTime(2020, 8, 16, 23, 19, 42, 590, DateTimeKind.Local).AddTicks(7114),
                            LockedOut = false,
                            PasswordHash = "XQGkmyhLdSuKkotbqLmNvaAWoOl0ASKCDWTrkplrSdw08AP1JFHzR5yH3y09dE0n/l1YAmYuD2L6poF64WbmrA==",
                            PasswordSalt = "YeO593QvyX33ISCRJKJKFw==",
                            Username = "pacijent11"
                        });
                });

            modelBuilder.Entity("HealthCare020.Core.Entities.LekarskoUverenje", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("DoktorId")
                        .HasColumnType("int");

                    b.Property<string>("OpisStanja")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<int>("PregledId")
                        .HasColumnType("int");

                    b.Property<int>("ZdravstvenoStanjeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DoktorId");

                    b.HasIndex("PregledId");

                    b.HasIndex("ZdravstvenoStanjeId");

                    b.ToTable("LekarskaUverenja");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            OpisStanja = "Stanje je za sada pod kontrolom",
                            PregledId = 1,
                            ZdravstvenoStanjeId = 3
                        },
                        new
                        {
                            Id = 2,
                            OpisStanja = "Test opis",
                            PregledId = 2,
                            ZdravstvenoStanjeId = 2
                        },
                        new
                        {
                            Id = 3,
                            OpisStanja = "Stanje je za sada pod kontrolom",
                            PregledId = 3,
                            ZdravstvenoStanjeId = 3
                        },
                        new
                        {
                            Id = 4,
                            OpisStanja = "Stanje je za sada pod kontrolom",
                            PregledId = 4,
                            ZdravstvenoStanjeId = 3
                        },
                        new
                        {
                            Id = 5,
                            OpisStanja = "Stanje je za sada pod kontrolom",
                            PregledId = 5,
                            ZdravstvenoStanjeId = 3
                        });
                });

            modelBuilder.Entity("HealthCare020.Core.Entities.LicniPodaci", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Adresa")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<string>("BrojTelefona")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DatumRodjenja")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GradId")
                        .HasColumnType("int");

                    b.Property<string>("Ime")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<string>("JMBG")
                        .IsRequired()
                        .HasColumnType("nvarchar(12)")
                        .HasMaxLength(12);

                    b.Property<string>("Pol")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("Prezime")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<byte[]>("ProfilePicture")
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Id");

                    b.HasIndex("GradId");

                    b.ToTable("LicniPodaci");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Adresa = "Gradacacka 10",
                            BrojTelefona = "0624322123",
                            DatumRodjenja = new DateTime(1980, 8, 16, 23, 19, 42, 591, DateTimeKind.Local).AddTicks(418),
                            EmailAddress = "doktor1@live.com",
                            GradId = 1,
                            Ime = "Fahir",
                            JMBG = "010202001",
                            Pol = "M",
                            Prezime = "Dokt"
                        },
                        new
                        {
                            Id = 2,
                            Adresa = "Envera Seh 10",
                            BrojTelefona = "062414322",
                            DatumRodjenja = new DateTime(1988, 8, 16, 23, 19, 42, 591, DateTimeKind.Local).AddTicks(2037),
                            EmailAddress = "prijem1@live.com",
                            GradId = 2,
                            Ime = "Fahir",
                            JMBG = "013412333",
                            Pol = "M",
                            Prezime = "Prijem"
                        },
                        new
                        {
                            Id = 3,
                            Adresa = "Alojza Benca 10",
                            BrojTelefona = "067231222",
                            DatumRodjenja = new DateTime(1973, 8, 16, 23, 19, 42, 591, DateTimeKind.Local).AddTicks(2081),
                            EmailAddress = "pacijent1@live.com",
                            GradId = 4,
                            Ime = "Fahir",
                            JMBG = "013475855",
                            Pol = "M",
                            Prezime = "Pacijent"
                        },
                        new
                        {
                            Id = 4,
                            Adresa = "Seiz 10",
                            BrojTelefona = "064322233",
                            DatumRodjenja = new DateTime(1970, 8, 16, 23, 19, 42, 591, DateTimeKind.Local).AddTicks(2087),
                            EmailAddress = "medtehnicar1@live.com",
                            GradId = 5,
                            Ime = "Fahir",
                            JMBG = "1475856888",
                            Pol = "M",
                            Prezime = "Tehnicar"
                        },
                        new
                        {
                            Id = 5,
                            Adresa = "Helst 12",
                            BrojTelefona = "06123233",
                            DatumRodjenja = new DateTime(1991, 8, 16, 23, 19, 42, 591, DateTimeKind.Local).AddTicks(2092),
                            EmailAddress = "doktor2@live.com",
                            GradId = 3,
                            Ime = "Fahir",
                            JMBG = "1154651655",
                            Pol = "M",
                            Prezime = "Doktdva"
                        },
                        new
                        {
                            Id = 6,
                            Adresa = "Neumsd 12",
                            BrojTelefona = "066585255",
                            DatumRodjenja = new DateTime(1996, 8, 16, 23, 19, 42, 591, DateTimeKind.Local).AddTicks(2098),
                            EmailAddress = "pacijentlecenje1@live.com",
                            GradId = 2,
                            Ime = "Fahir",
                            JMBG = "7584247777",
                            Pol = "M",
                            Prezime = "Lecenje"
                        },
                        new
                        {
                            Id = 7,
                            Adresa = "Reu 12",
                            BrojTelefona = "06585524",
                            DatumRodjenja = new DateTime(1966, 8, 16, 23, 19, 42, 591, DateTimeKind.Local).AddTicks(2103),
                            EmailAddress = "pacijentlecenje2@live.com",
                            GradId = 2,
                            Ime = "Fahir",
                            JMBG = "2557766355",
                            Pol = "M",
                            Prezime = "Lecenjedva"
                        },
                        new
                        {
                            Id = 8,
                            Adresa = "Golubacka 12",
                            BrojTelefona = "063412333",
                            DatumRodjenja = new DateTime(1993, 8, 16, 23, 19, 42, 591, DateTimeKind.Local).AddTicks(2108),
                            EmailAddress = "pacijent3@live.com",
                            GradId = 2,
                            Ime = "Fahir",
                            JMBG = "2534123332",
                            Pol = "M",
                            Prezime = "Pacdva"
                        },
                        new
                        {
                            Id = 9,
                            Adresa = "Reu 17",
                            BrojTelefona = "0612323333",
                            DatumRodjenja = new DateTime(1993, 8, 16, 23, 19, 42, 591, DateTimeKind.Local).AddTicks(2112),
                            EmailAddress = "pacijent4@live.com",
                            GradId = 5,
                            Ime = "Fahir",
                            JMBG = "25111020201",
                            Pol = "M",
                            Prezime = "Pactri"
                        },
                        new
                        {
                            Id = 10,
                            Adresa = "Leur 91",
                            BrojTelefona = "06585524",
                            DatumRodjenja = new DateTime(1993, 8, 31, 23, 19, 42, 591, DateTimeKind.Local).AddTicks(2117),
                            EmailAddress = "pacijent5@live.com",
                            GradId = 3,
                            Ime = "Fahir",
                            JMBG = "2557766355",
                            Pol = "M",
                            Prezime = "Paccetiri"
                        },
                        new
                        {
                            Id = 11,
                            Adresa = "Reu 12",
                            BrojTelefona = "060365955",
                            DatumRodjenja = new DateTime(1979, 8, 16, 23, 19, 42, 591, DateTimeKind.Local).AddTicks(2138),
                            EmailAddress = "pacijent6@live.com",
                            GradId = 2,
                            Ime = "Fahir",
                            JMBG = "2574214855",
                            Pol = "M",
                            Prezime = "Pacpet"
                        },
                        new
                        {
                            Id = 12,
                            Adresa = "Topolska 18",
                            BrojTelefona = "06585524",
                            DatumRodjenja = new DateTime(1979, 9, 16, 23, 19, 42, 591, DateTimeKind.Local).AddTicks(2142),
                            EmailAddress = "pacijent7@live.com",
                            GradId = 3,
                            Ime = "Fahir",
                            JMBG = "84575856999",
                            Pol = "M",
                            Prezime = "Pacsest"
                        },
                        new
                        {
                            Id = 13,
                            Adresa = "Envera Sehovica 19",
                            BrojTelefona = "0675845555",
                            DatumRodjenja = new DateTime(1979, 5, 16, 23, 19, 42, 591, DateTimeKind.Local).AddTicks(2147),
                            EmailAddress = "pacijent8@live.com",
                            GradId = 5,
                            Ime = "Fahir",
                            JMBG = "85442222222",
                            Pol = "M",
                            Prezime = "Pacsedam"
                        },
                        new
                        {
                            Id = 14,
                            Adresa = "Reu 12",
                            BrojTelefona = "06585524",
                            DatumRodjenja = new DateTime(1956, 8, 16, 23, 19, 42, 591, DateTimeKind.Local).AddTicks(2152),
                            EmailAddress = "pacijent9@live.com",
                            GradId = 2,
                            Ime = "Fahir",
                            JMBG = "2551876355",
                            Pol = "M",
                            Prezime = "Pacosam"
                        },
                        new
                        {
                            Id = 15,
                            Adresa = "Bosanskih gazija 9",
                            BrojTelefona = "065234121",
                            DatumRodjenja = new DateTime(1956, 7, 16, 23, 19, 42, 591, DateTimeKind.Local).AddTicks(2156),
                            EmailAddress = "pacijent10@live.com",
                            GradId = 2,
                            Ime = "Fahir",
                            JMBG = "2557766355",
                            Pol = "M",
                            Prezime = "Pacdevet"
                        },
                        new
                        {
                            Id = 16,
                            Adresa = "Frau Hermanova 2",
                            BrojTelefona = "0625485477",
                            DatumRodjenja = new DateTime(1956, 5, 16, 23, 19, 42, 591, DateTimeKind.Local).AddTicks(2161),
                            EmailAddress = "pacijent11@live.com",
                            GradId = 2,
                            Ime = "Fahir",
                            JMBG = "8422222211",
                            Pol = "M",
                            Prezime = "Pacdeset"
                        },
                        new
                        {
                            Id = 17,
                            Adresa = "Sarajevska 25",
                            BrojTelefona = "068575853",
                            DatumRodjenja = new DateTime(1985, 8, 16, 23, 19, 42, 591, DateTimeKind.Local).AddTicks(2166),
                            EmailAddress = "pacijent12@live.com",
                            GradId = 2,
                            Ime = "Fahir",
                            JMBG = "8352121332",
                            Pol = "M",
                            Prezime = "Pacjedanaest"
                        },
                        new
                        {
                            Id = 18,
                            Adresa = "Sarajevska 100",
                            BrojTelefona = "0624745855",
                            DatumRodjenja = new DateTime(1996, 8, 16, 23, 19, 42, 591, DateTimeKind.Local).AddTicks(2172),
                            EmailAddress = "pacijent20@live.com",
                            GradId = 2,
                            Ime = "Fahir",
                            JMBG = "1234567891",
                            Pol = "M",
                            Prezime = "Pacdvadeset"
                        },
                        new
                        {
                            Id = 19,
                            Adresa = "Lumbago 100",
                            BrojTelefona = "0624234123",
                            DatumRodjenja = new DateTime(1966, 8, 16, 23, 19, 42, 591, DateTimeKind.Local).AddTicks(2176),
                            EmailAddress = "pacijent21@live.com",
                            GradId = 4,
                            Ime = "Fahir",
                            JMBG = "9874563211",
                            Pol = "M",
                            Prezime = "Pacdvajedan"
                        });
                });

            modelBuilder.Entity("HealthCare020.Core.Entities.MedicinskiTehnicar", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("RadnikId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RadnikId");

                    b.ToTable("MedicinskiTehnicari");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            RadnikId = 3
                        });
                });

            modelBuilder.Entity("HealthCare020.Core.Entities.NaucnaOblast", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Naziv")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("NaucneOblasti");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Naziv = "Hirurgija"
                        },
                        new
                        {
                            Id = 2,
                            Naziv = "Endokrinologija"
                        },
                        new
                        {
                            Id = 3,
                            Naziv = "Neurohirurgija"
                        },
                        new
                        {
                            Id = 4,
                            Naziv = "Reumatologija"
                        },
                        new
                        {
                            Id = 5,
                            Naziv = "Kardiologija"
                        },
                        new
                        {
                            Id = 6,
                            Naziv = "Fizijatrija"
                        });
                });

            modelBuilder.Entity("HealthCare020.Core.Entities.Pacijent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("KorisnickiNalogId")
                        .HasColumnType("int");

                    b.Property<int>("ZdravstvenaKnjizicaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("KorisnickiNalogId");

                    b.HasIndex("ZdravstvenaKnjizicaId");

                    b.ToTable("Pacijenti");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            KorisnickiNalogId = 4,
                            ZdravstvenaKnjizicaId = 1
                        },
                        new
                        {
                            Id = 2,
                            KorisnickiNalogId = 7,
                            ZdravstvenaKnjizicaId = 2
                        },
                        new
                        {
                            Id = 3,
                            KorisnickiNalogId = 8,
                            ZdravstvenaKnjizicaId = 3
                        },
                        new
                        {
                            Id = 4,
                            KorisnickiNalogId = 9,
                            ZdravstvenaKnjizicaId = 4
                        },
                        new
                        {
                            Id = 5,
                            KorisnickiNalogId = 10,
                            ZdravstvenaKnjizicaId = 5
                        },
                        new
                        {
                            Id = 6,
                            KorisnickiNalogId = 11,
                            ZdravstvenaKnjizicaId = 6
                        },
                        new
                        {
                            Id = 7,
                            KorisnickiNalogId = 12,
                            ZdravstvenaKnjizicaId = 7
                        },
                        new
                        {
                            Id = 8,
                            KorisnickiNalogId = 13,
                            ZdravstvenaKnjizicaId = 8
                        },
                        new
                        {
                            Id = 9,
                            KorisnickiNalogId = 14,
                            ZdravstvenaKnjizicaId = 9
                        },
                        new
                        {
                            Id = 10,
                            KorisnickiNalogId = 15,
                            ZdravstvenaKnjizicaId = 10
                        },
                        new
                        {
                            Id = 11,
                            KorisnickiNalogId = 16,
                            ZdravstvenaKnjizicaId = 11
                        });
                });

            modelBuilder.Entity("HealthCare020.Core.Entities.PacijentNaLecenju", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BrojSobe")
                        .HasColumnType("int");

                    b.Property<int>("LicniPodaciId")
                        .HasColumnType("int");

                    b.Property<int>("StacionarnoOdeljenjeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LicniPodaciId");

                    b.HasIndex("StacionarnoOdeljenjeId");

                    b.ToTable("PacijentiNaLecenju");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BrojSobe = 16,
                            LicniPodaciId = 6,
                            StacionarnoOdeljenjeId = 1
                        },
                        new
                        {
                            Id = 2,
                            BrojSobe = 16,
                            LicniPodaciId = 7,
                            StacionarnoOdeljenjeId = 1
                        });
                });

            modelBuilder.Entity("HealthCare020.Core.Entities.Pregled", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DatumPregleda")
                        .HasColumnType("datetime2");

                    b.Property<int>("DoktorId")
                        .HasColumnType("int");

                    b.Property<bool>("IsOdradjen")
                        .HasColumnType("bit");

                    b.Property<int>("PacijentId")
                        .HasColumnType("int");

                    b.Property<long>("VrijemePregledaUid")
                        .HasColumnType("bigint");

                    b.Property<int>("ZahtevZaPregledId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DoktorId");

                    b.HasIndex("PacijentId");

                    b.HasIndex("ZahtevZaPregledId");

                    b.ToTable("Pregledi");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DatumPregleda = new DateTime(2020, 6, 12, 10, 0, 0, 0, DateTimeKind.Local),
                            DoktorId = 1,
                            IsOdradjen = true,
                            PacijentId = 1,
                            VrijemePregledaUid = 2L,
                            ZahtevZaPregledId = 1
                        },
                        new
                        {
                            Id = 2,
                            DatumPregleda = new DateTime(2020, 6, 13, 10, 0, 0, 0, DateTimeKind.Local),
                            DoktorId = 1,
                            IsOdradjen = true,
                            PacijentId = 1,
                            VrijemePregledaUid = 2L,
                            ZahtevZaPregledId = 3
                        },
                        new
                        {
                            Id = 3,
                            DatumPregleda = new DateTime(2020, 6, 14, 10, 0, 0, 0, DateTimeKind.Local),
                            DoktorId = 1,
                            IsOdradjen = true,
                            PacijentId = 1,
                            VrijemePregledaUid = 2L,
                            ZahtevZaPregledId = 4
                        },
                        new
                        {
                            Id = 4,
                            DatumPregleda = new DateTime(2020, 6, 15, 10, 0, 0, 0, DateTimeKind.Local),
                            DoktorId = 1,
                            IsOdradjen = true,
                            PacijentId = 1,
                            VrijemePregledaUid = 2L,
                            ZahtevZaPregledId = 5
                        },
                        new
                        {
                            Id = 5,
                            DatumPregleda = new DateTime(2020, 6, 16, 10, 0, 0, 0, DateTimeKind.Local),
                            DoktorId = 1,
                            IsOdradjen = true,
                            PacijentId = 1,
                            VrijemePregledaUid = 2L,
                            ZahtevZaPregledId = 6
                        },
                        new
                        {
                            Id = 6,
                            DatumPregleda = new DateTime(2020, 7, 18, 12, 0, 0, 0, DateTimeKind.Local),
                            DoktorId = 1,
                            IsOdradjen = true,
                            PacijentId = 2,
                            VrijemePregledaUid = 6L,
                            ZahtevZaPregledId = 7
                        },
                        new
                        {
                            Id = 7,
                            DatumPregleda = new DateTime(2020, 7, 18, 12, 0, 0, 0, DateTimeKind.Local),
                            DoktorId = 1,
                            IsOdradjen = true,
                            PacijentId = 2,
                            VrijemePregledaUid = 6L,
                            ZahtevZaPregledId = 8
                        },
                        new
                        {
                            Id = 8,
                            DatumPregleda = new DateTime(2020, 7, 18, 12, 0, 0, 0, DateTimeKind.Local),
                            DoktorId = 1,
                            IsOdradjen = true,
                            PacijentId = 3,
                            VrijemePregledaUid = 6L,
                            ZahtevZaPregledId = 9
                        },
                        new
                        {
                            Id = 9,
                            DatumPregleda = new DateTime(2020, 7, 18, 12, 0, 0, 0, DateTimeKind.Local),
                            DoktorId = 2,
                            IsOdradjen = true,
                            PacijentId = 4,
                            VrijemePregledaUid = 6L,
                            ZahtevZaPregledId = 10
                        },
                        new
                        {
                            Id = 10,
                            DatumPregleda = new DateTime(2020, 7, 18, 14, 0, 0, 0, DateTimeKind.Local),
                            DoktorId = 2,
                            IsOdradjen = true,
                            PacijentId = 5,
                            VrijemePregledaUid = 10L,
                            ZahtevZaPregledId = 11
                        },
                        new
                        {
                            Id = 11,
                            DatumPregleda = new DateTime(2020, 7, 18, 14, 0, 0, 0, DateTimeKind.Local),
                            DoktorId = 2,
                            IsOdradjen = true,
                            PacijentId = 6,
                            VrijemePregledaUid = 10L,
                            ZahtevZaPregledId = 12
                        },
                        new
                        {
                            Id = 12,
                            DatumPregleda = new DateTime(2020, 7, 18, 14, 0, 0, 0, DateTimeKind.Local),
                            DoktorId = 2,
                            IsOdradjen = true,
                            PacijentId = 7,
                            VrijemePregledaUid = 10L,
                            ZahtevZaPregledId = 13
                        },
                        new
                        {
                            Id = 13,
                            DatumPregleda = new DateTime(2020, 7, 18, 15, 0, 0, 0, DateTimeKind.Local),
                            DoktorId = 2,
                            IsOdradjen = true,
                            PacijentId = 8,
                            VrijemePregledaUid = 12L,
                            ZahtevZaPregledId = 14
                        },
                        new
                        {
                            Id = 14,
                            DatumPregleda = new DateTime(2020, 7, 18, 15, 0, 0, 0, DateTimeKind.Local),
                            DoktorId = 2,
                            IsOdradjen = true,
                            PacijentId = 9,
                            VrijemePregledaUid = 12L,
                            ZahtevZaPregledId = 15
                        },
                        new
                        {
                            Id = 15,
                            DatumPregleda = new DateTime(2020, 7, 18, 15, 0, 0, 0, DateTimeKind.Local),
                            DoktorId = 2,
                            IsOdradjen = true,
                            PacijentId = 10,
                            VrijemePregledaUid = 12L,
                            ZahtevZaPregledId = 16
                        });
                });

            modelBuilder.Entity("HealthCare020.Core.Entities.Radnik", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("KorisnickiNalogId")
                        .HasColumnType("int");

                    b.Property<int>("LicniPodaciId")
                        .HasColumnType("int");

                    b.Property<int>("StacionarnoOdeljenjeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("KorisnickiNalogId");

                    b.HasIndex("LicniPodaciId");

                    b.HasIndex("StacionarnoOdeljenjeId");

                    b.ToTable("Radnici");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            KorisnickiNalogId = 2,
                            LicniPodaciId = 1,
                            StacionarnoOdeljenjeId = 1
                        },
                        new
                        {
                            Id = 2,
                            KorisnickiNalogId = 3,
                            LicniPodaciId = 2,
                            StacionarnoOdeljenjeId = 1
                        },
                        new
                        {
                            Id = 3,
                            KorisnickiNalogId = 5,
                            LicniPodaciId = 4,
                            StacionarnoOdeljenjeId = 1
                        },
                        new
                        {
                            Id = 4,
                            KorisnickiNalogId = 6,
                            LicniPodaciId = 5,
                            StacionarnoOdeljenjeId = 2
                        });
                });

            modelBuilder.Entity("HealthCare020.Core.Entities.RadnikPrijem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("RadnikId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RadnikId");

                    b.ToTable("RadniciPrijem");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            RadnikId = 2
                        });
                });

            modelBuilder.Entity("HealthCare020.Core.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Naziv")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Naziv = "Administrator"
                        },
                        new
                        {
                            Id = 2,
                            Naziv = "Doktor"
                        },
                        new
                        {
                            Id = 3,
                            Naziv = "MedicinckiTehnicar"
                        },
                        new
                        {
                            Id = 4,
                            Naziv = "RadnikPrijem"
                        },
                        new
                        {
                            Id = 5,
                            Naziv = "Pacijent"
                        });
                });

            modelBuilder.Entity("HealthCare020.Core.Entities.RoleKorisnickiNalog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("KorisnickiNalogId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("KorisnickiNalogId");

                    b.HasIndex("RoleId");

                    b.ToTable("RolesKorisnickiNalozi");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            KorisnickiNalogId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 2,
                            KorisnickiNalogId = 1,
                            RoleId = 2
                        },
                        new
                        {
                            Id = 3,
                            KorisnickiNalogId = 1,
                            RoleId = 3
                        },
                        new
                        {
                            Id = 4,
                            KorisnickiNalogId = 1,
                            RoleId = 4
                        },
                        new
                        {
                            Id = 5,
                            KorisnickiNalogId = 1,
                            RoleId = 5
                        },
                        new
                        {
                            Id = 6,
                            KorisnickiNalogId = 2,
                            RoleId = 2
                        },
                        new
                        {
                            Id = 7,
                            KorisnickiNalogId = 2,
                            RoleId = 3
                        },
                        new
                        {
                            Id = 8,
                            KorisnickiNalogId = 2,
                            RoleId = 4
                        },
                        new
                        {
                            Id = 9,
                            KorisnickiNalogId = 2,
                            RoleId = 5
                        },
                        new
                        {
                            Id = 10,
                            KorisnickiNalogId = 5,
                            RoleId = 3
                        },
                        new
                        {
                            Id = 11,
                            KorisnickiNalogId = 5,
                            RoleId = 4
                        },
                        new
                        {
                            Id = 12,
                            KorisnickiNalogId = 5,
                            RoleId = 5
                        },
                        new
                        {
                            Id = 14,
                            KorisnickiNalogId = 3,
                            RoleId = 4
                        },
                        new
                        {
                            Id = 15,
                            KorisnickiNalogId = 4,
                            RoleId = 5
                        },
                        new
                        {
                            Id = 16,
                            KorisnickiNalogId = 6,
                            RoleId = 2
                        },
                        new
                        {
                            Id = 17,
                            KorisnickiNalogId = 6,
                            RoleId = 3
                        },
                        new
                        {
                            Id = 18,
                            KorisnickiNalogId = 6,
                            RoleId = 4
                        },
                        new
                        {
                            Id = 19,
                            KorisnickiNalogId = 6,
                            RoleId = 5
                        },
                        new
                        {
                            Id = 20,
                            KorisnickiNalogId = 7,
                            RoleId = 5
                        },
                        new
                        {
                            Id = 21,
                            KorisnickiNalogId = 8,
                            RoleId = 5
                        },
                        new
                        {
                            Id = 22,
                            KorisnickiNalogId = 9,
                            RoleId = 5
                        },
                        new
                        {
                            Id = 23,
                            KorisnickiNalogId = 10,
                            RoleId = 5
                        },
                        new
                        {
                            Id = 24,
                            KorisnickiNalogId = 11,
                            RoleId = 5
                        },
                        new
                        {
                            Id = 25,
                            KorisnickiNalogId = 12,
                            RoleId = 5
                        },
                        new
                        {
                            Id = 26,
                            KorisnickiNalogId = 13,
                            RoleId = 5
                        },
                        new
                        {
                            Id = 27,
                            KorisnickiNalogId = 14,
                            RoleId = 5
                        },
                        new
                        {
                            Id = 28,
                            KorisnickiNalogId = 15,
                            RoleId = 5
                        },
                        new
                        {
                            Id = 29,
                            KorisnickiNalogId = 16,
                            RoleId = 5
                        });
                });

            modelBuilder.Entity("HealthCare020.Core.Entities.StacionarnoOdeljenje", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Naziv")
                        .HasColumnType("nvarchar(40)")
                        .HasMaxLength(40);

                    b.HasKey("Id");

                    b.ToTable("StacionarnaOdeljenja");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Naziv = "Hiruško"
                        },
                        new
                        {
                            Id = 2,
                            Naziv = "Plućno"
                        },
                        new
                        {
                            Id = 3,
                            Naziv = "Ortopedijsko"
                        },
                        new
                        {
                            Id = 4,
                            Naziv = "Koronarno"
                        });
                });

            modelBuilder.Entity("HealthCare020.Core.Entities.Uputnica", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DatumVreme")
                        .HasColumnType("datetime2");

                    b.Property<string>("Napomena")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PacijentId")
                        .HasColumnType("int");

                    b.Property<string>("Razlog")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UpucenKodDoktoraId")
                        .HasColumnType("int");

                    b.Property<int>("UputioDoktorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PacijentId");

                    b.HasIndex("UpucenKodDoktoraId");

                    b.HasIndex("UputioDoktorId");

                    b.ToTable("Uputnice");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DatumVreme = new DateTime(2020, 8, 15, 23, 19, 42, 592, DateTimeKind.Local).AddTicks(8668),
                            Napomena = "Pregledati urnarni trakt",
                            PacijentId = 1,
                            Razlog = "Mucnina u stomaku",
                            UpucenKodDoktoraId = 2,
                            UputioDoktorId = 1
                        },
                        new
                        {
                            Id = 2,
                            DatumVreme = new DateTime(2020, 8, 15, 23, 19, 42, 592, DateTimeKind.Local).AddTicks(9471),
                            Napomena = "Pregledati glavu",
                            PacijentId = 1,
                            Razlog = "Bol u slepoocnici",
                            UpucenKodDoktoraId = 1,
                            UputioDoktorId = 2
                        },
                        new
                        {
                            Id = 3,
                            DatumVreme = new DateTime(2020, 8, 15, 23, 19, 42, 592, DateTimeKind.Local).AddTicks(9497),
                            Napomena = "Pregledati urnarni trakt",
                            PacijentId = 2,
                            Razlog = "Mucnina u stomaku",
                            UpucenKodDoktoraId = 2,
                            UputioDoktorId = 1
                        },
                        new
                        {
                            Id = 4,
                            DatumVreme = new DateTime(2020, 8, 15, 23, 19, 42, 592, DateTimeKind.Local).AddTicks(9501),
                            Napomena = "Pregledati urnarni trakt",
                            PacijentId = 2,
                            Razlog = "Mucnina u stomaku",
                            UpucenKodDoktoraId = 1,
                            UputioDoktorId = 2
                        });
                });

            modelBuilder.Entity("HealthCare020.Core.Entities.ZahtevZaPosetu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BrojTelefonaPosetioca")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DatumVremeKreiranja")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsObradjen")
                        .HasColumnType("bit");

                    b.Property<int>("PacijentNaLecenjuId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ZakazanoDatumVreme")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PacijentNaLecenjuId");

                    b.ToTable("ZahteviZaPosetu");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BrojTelefonaPosetioca = "066985295",
                            DatumVremeKreiranja = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Local),
                            IsObradjen = true,
                            PacijentNaLecenjuId = 1,
                            ZakazanoDatumVreme = new DateTime(2020, 8, 11, 14, 30, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 2,
                            BrojTelefonaPosetioca = "066585777",
                            DatumVremeKreiranja = new DateTime(2020, 8, 12, 23, 19, 42, 593, DateTimeKind.Local).AddTicks(3407),
                            IsObradjen = false,
                            PacijentNaLecenjuId = 2
                        });
                });

            modelBuilder.Entity("HealthCare020.Core.Entities.ZahtevZaPregled", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DatumVreme")
                        .HasColumnType("datetime2");

                    b.Property<int>("DoktorId")
                        .HasColumnType("int");

                    b.Property<bool>("IsObradjen")
                        .HasColumnType("bit");

                    b.Property<string>("Napomena")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<int>("PacijentId")
                        .HasColumnType("int");

                    b.Property<int?>("UputnicaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DoktorId");

                    b.HasIndex("PacijentId");

                    b.HasIndex("UputnicaId");

                    b.ToTable("ZahteviZaPregled");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DatumVreme = new DateTime(2020, 8, 14, 23, 19, 42, 592, DateTimeKind.Local).AddTicks(1592),
                            DoktorId = 1,
                            IsObradjen = true,
                            Napomena = "Otežano disanje",
                            PacijentId = 1
                        },
                        new
                        {
                            Id = 2,
                            DatumVreme = new DateTime(2020, 8, 13, 23, 19, 42, 592, DateTimeKind.Local).AddTicks(2613),
                            DoktorId = 1,
                            IsObradjen = false,
                            Napomena = "Problemi sa mokraćnim kanalima",
                            PacijentId = 1
                        },
                        new
                        {
                            Id = 3,
                            DatumVreme = new DateTime(2020, 7, 16, 23, 19, 42, 592, DateTimeKind.Local).AddTicks(2645),
                            DoktorId = 1,
                            IsObradjen = true,
                            Napomena = "Problemi sa disanjem",
                            PacijentId = 1
                        },
                        new
                        {
                            Id = 4,
                            DatumVreme = new DateTime(2020, 6, 16, 23, 19, 42, 592, DateTimeKind.Local).AddTicks(2651),
                            DoktorId = 1,
                            IsObradjen = true,
                            Napomena = "Problemi sa radom srca",
                            PacijentId = 1
                        },
                        new
                        {
                            Id = 5,
                            DatumVreme = new DateTime(2020, 4, 16, 23, 19, 42, 592, DateTimeKind.Local).AddTicks(2655),
                            DoktorId = 1,
                            IsObradjen = true,
                            Napomena = "Razredjena krv",
                            PacijentId = 1
                        },
                        new
                        {
                            Id = 6,
                            DatumVreme = new DateTime(2019, 12, 16, 23, 19, 42, 592, DateTimeKind.Local).AddTicks(2660),
                            DoktorId = 1,
                            IsObradjen = true,
                            Napomena = "Blagi bolovi u grudima",
                            PacijentId = 1
                        },
                        new
                        {
                            Id = 7,
                            DatumVreme = new DateTime(2020, 4, 16, 23, 19, 42, 592, DateTimeKind.Local).AddTicks(2665),
                            DoktorId = 1,
                            IsObradjen = true,
                            Napomena = "Bolovi u glavi",
                            PacijentId = 2
                        },
                        new
                        {
                            Id = 8,
                            DatumVreme = new DateTime(2020, 6, 16, 23, 19, 42, 592, DateTimeKind.Local).AddTicks(2669),
                            DoktorId = 1,
                            IsObradjen = true,
                            Napomena = "Blagi bolovi u vratu",
                            PacijentId = 2
                        },
                        new
                        {
                            Id = 9,
                            DatumVreme = new DateTime(2020, 6, 16, 23, 19, 42, 592, DateTimeKind.Local).AddTicks(2673),
                            DoktorId = 1,
                            IsObradjen = true,
                            Napomena = "Blagi bolovi u slepoocnici",
                            PacijentId = 3
                        },
                        new
                        {
                            Id = 10,
                            DatumVreme = new DateTime(2020, 7, 16, 23, 19, 42, 592, DateTimeKind.Local).AddTicks(2678),
                            DoktorId = 2,
                            IsObradjen = true,
                            Napomena = "Blagi bolovi u grudima",
                            PacijentId = 4
                        },
                        new
                        {
                            Id = 11,
                            DatumVreme = new DateTime(2020, 5, 16, 23, 19, 42, 592, DateTimeKind.Local).AddTicks(2681),
                            DoktorId = 2,
                            IsObradjen = true,
                            Napomena = "Peckanje u ocima",
                            PacijentId = 5
                        },
                        new
                        {
                            Id = 12,
                            DatumVreme = new DateTime(2020, 6, 16, 23, 19, 42, 592, DateTimeKind.Local).AddTicks(2685),
                            DoktorId = 2,
                            IsObradjen = true,
                            Napomena = "Bolovi u stomaku",
                            PacijentId = 6
                        },
                        new
                        {
                            Id = 13,
                            DatumVreme = new DateTime(2020, 6, 16, 23, 19, 42, 592, DateTimeKind.Local).AddTicks(2689),
                            DoktorId = 2,
                            IsObradjen = true,
                            Napomena = "Blagi bolovi u zeludcu",
                            PacijentId = 7
                        },
                        new
                        {
                            Id = 14,
                            DatumVreme = new DateTime(2020, 7, 19, 23, 19, 42, 592, DateTimeKind.Local).AddTicks(2693),
                            DoktorId = 2,
                            IsObradjen = true,
                            Napomena = "Blagi bolovi u ramenu",
                            PacijentId = 8
                        },
                        new
                        {
                            Id = 15,
                            DatumVreme = new DateTime(2020, 6, 25, 23, 19, 42, 592, DateTimeKind.Local).AddTicks(2697),
                            DoktorId = 2,
                            IsObradjen = true,
                            Napomena = "Blagi bolovi u ocima",
                            PacijentId = 9
                        },
                        new
                        {
                            Id = 16,
                            DatumVreme = new DateTime(2020, 6, 16, 23, 19, 42, 592, DateTimeKind.Local).AddTicks(2701),
                            DoktorId = 2,
                            IsObradjen = true,
                            Napomena = "Blagi bolovi u ceonom dijelu",
                            PacijentId = 10
                        },
                        new
                        {
                            Id = 17,
                            DatumVreme = new DateTime(2020, 8, 14, 23, 19, 42, 592, DateTimeKind.Local).AddTicks(2705),
                            DoktorId = 2,
                            IsObradjen = false,
                            Napomena = "Blagi bolovi u stomaku",
                            PacijentId = 2
                        },
                        new
                        {
                            Id = 18,
                            DatumVreme = new DateTime(2020, 8, 14, 23, 19, 42, 592, DateTimeKind.Local).AddTicks(2710),
                            DoktorId = 2,
                            IsObradjen = false,
                            Napomena = "Blagi bolovi u zeludcu",
                            PacijentId = 8
                        },
                        new
                        {
                            Id = 19,
                            DatumVreme = new DateTime(2020, 8, 14, 23, 19, 42, 592, DateTimeKind.Local).AddTicks(2713),
                            DoktorId = 1,
                            IsObradjen = false,
                            Napomena = "Blagi bolovi u stomaku",
                            PacijentId = 2
                        },
                        new
                        {
                            Id = 20,
                            DatumVreme = new DateTime(2020, 8, 14, 23, 19, 42, 592, DateTimeKind.Local).AddTicks(2716),
                            DoktorId = 1,
                            IsObradjen = false,
                            Napomena = "Blagi bolovi u zeludcu",
                            PacijentId = 8
                        });
                });

            modelBuilder.Entity("HealthCare020.Core.Entities.ZdravstvenaKnjizica", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DoktorId")
                        .HasColumnType("int");

                    b.Property<int>("LicniPodaciId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DoktorId");

                    b.HasIndex("LicniPodaciId");

                    b.ToTable("ZdravstvenaKnjizica");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DoktorId = 1,
                            LicniPodaciId = 3
                        },
                        new
                        {
                            Id = 2,
                            DoktorId = 1,
                            LicniPodaciId = 8
                        },
                        new
                        {
                            Id = 3,
                            DoktorId = 1,
                            LicniPodaciId = 9
                        },
                        new
                        {
                            Id = 4,
                            DoktorId = 1,
                            LicniPodaciId = 10
                        },
                        new
                        {
                            Id = 5,
                            DoktorId = 1,
                            LicniPodaciId = 11
                        },
                        new
                        {
                            Id = 6,
                            DoktorId = 1,
                            LicniPodaciId = 12
                        },
                        new
                        {
                            Id = 7,
                            DoktorId = 1,
                            LicniPodaciId = 13
                        },
                        new
                        {
                            Id = 8,
                            DoktorId = 1,
                            LicniPodaciId = 14
                        },
                        new
                        {
                            Id = 9,
                            DoktorId = 1,
                            LicniPodaciId = 15
                        },
                        new
                        {
                            Id = 10,
                            DoktorId = 1,
                            LicniPodaciId = 16
                        },
                        new
                        {
                            Id = 11,
                            DoktorId = 1,
                            LicniPodaciId = 17
                        },
                        new
                        {
                            Id = 12,
                            DoktorId = 1,
                            LicniPodaciId = 18
                        },
                        new
                        {
                            Id = 13,
                            DoktorId = 1,
                            LicniPodaciId = 19
                        });
                });

            modelBuilder.Entity("HealthCare020.Core.Entities.ZdravstvenoStanje", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Opis")
                        .HasColumnType("nvarchar(15)")
                        .HasMaxLength(15);

                    b.HasKey("Id");

                    b.ToTable("ZdravstvenaStanja");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Opis = "Odlično"
                        },
                        new
                        {
                            Id = 2,
                            Opis = "Dobro"
                        },
                        new
                        {
                            Id = 3,
                            Opis = "Pod kontrolom"
                        },
                        new
                        {
                            Id = 4,
                            Opis = "Otežano"
                        },
                        new
                        {
                            Id = 5,
                            Opis = "Loše"
                        });
                });

            modelBuilder.Entity("HealthCare020.Core.Entities.Doktor", b =>
                {
                    b.HasOne("HealthCare020.Core.Entities.NaucnaOblast", "NaucnaOblast")
                        .WithMany()
                        .HasForeignKey("NaucnaOblastId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HealthCare020.Core.Entities.Radnik", "Radnik")
                        .WithMany()
                        .HasForeignKey("RadnikId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HealthCare020.Core.Entities.Grad", b =>
                {
                    b.HasOne("HealthCare020.Core.Entities.Drzava", "Drzava")
                        .WithMany("Gradovi")
                        .HasForeignKey("DrzavaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("HealthCare020.Core.Entities.LekarskoUverenje", b =>
                {
                    b.HasOne("HealthCare020.Core.Entities.Doktor", null)
                        .WithMany("LekarskaUverenja")
                        .HasForeignKey("DoktorId");

                    b.HasOne("HealthCare020.Core.Entities.Pregled", "Pregled")
                        .WithMany()
                        .HasForeignKey("PregledId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HealthCare020.Core.Entities.ZdravstvenoStanje", "ZdravstvenoStanje")
                        .WithMany()
                        .HasForeignKey("ZdravstvenoStanjeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HealthCare020.Core.Entities.LicniPodaci", b =>
                {
                    b.HasOne("HealthCare020.Core.Entities.Grad", "Grad")
                        .WithMany()
                        .HasForeignKey("GradId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HealthCare020.Core.Entities.MedicinskiTehnicar", b =>
                {
                    b.HasOne("HealthCare020.Core.Entities.Radnik", "Radnik")
                        .WithMany()
                        .HasForeignKey("RadnikId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HealthCare020.Core.Entities.Pacijent", b =>
                {
                    b.HasOne("HealthCare020.Core.Entities.KorisnickiNalog", "KorisnickiNalog")
                        .WithMany()
                        .HasForeignKey("KorisnickiNalogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HealthCare020.Core.Entities.ZdravstvenaKnjizica", "ZdravstvenaKnjizica")
                        .WithMany()
                        .HasForeignKey("ZdravstvenaKnjizicaId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("HealthCare020.Core.Entities.PacijentNaLecenju", b =>
                {
                    b.HasOne("HealthCare020.Core.Entities.LicniPodaci", "LicniPodaci")
                        .WithMany()
                        .HasForeignKey("LicniPodaciId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("HealthCare020.Core.Entities.StacionarnoOdeljenje", "StacionarnoOdeljenje")
                        .WithMany()
                        .HasForeignKey("StacionarnoOdeljenjeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HealthCare020.Core.Entities.Pregled", b =>
                {
                    b.HasOne("HealthCare020.Core.Entities.Doktor", "Doktor")
                        .WithMany("Pregledi")
                        .HasForeignKey("DoktorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("HealthCare020.Core.Entities.Pacijent", "Pacijent")
                        .WithMany("Pregledi")
                        .HasForeignKey("PacijentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("HealthCare020.Core.Entities.ZahtevZaPregled", "ZahtevZaPregled")
                        .WithMany()
                        .HasForeignKey("ZahtevZaPregledId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HealthCare020.Core.Entities.Radnik", b =>
                {
                    b.HasOne("HealthCare020.Core.Entities.KorisnickiNalog", "KorisnickiNalog")
                        .WithMany()
                        .HasForeignKey("KorisnickiNalogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HealthCare020.Core.Entities.LicniPodaci", "LicniPodaci")
                        .WithMany()
                        .HasForeignKey("LicniPodaciId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HealthCare020.Core.Entities.StacionarnoOdeljenje", "StacionarnoOdeljenje")
                        .WithMany()
                        .HasForeignKey("StacionarnoOdeljenjeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HealthCare020.Core.Entities.RadnikPrijem", b =>
                {
                    b.HasOne("HealthCare020.Core.Entities.Radnik", "Radnik")
                        .WithMany()
                        .HasForeignKey("RadnikId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HealthCare020.Core.Entities.RoleKorisnickiNalog", b =>
                {
                    b.HasOne("HealthCare020.Core.Entities.KorisnickiNalog", "KorisnickiNalog")
                        .WithMany("RolesKorisnickiNalog")
                        .HasForeignKey("KorisnickiNalogId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("HealthCare020.Core.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HealthCare020.Core.Entities.Uputnica", b =>
                {
                    b.HasOne("HealthCare020.Core.Entities.Pacijent", "Pacijent")
                        .WithMany("Uputnice")
                        .HasForeignKey("PacijentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("HealthCare020.Core.Entities.Doktor", "UpucenKodDoktora")
                        .WithMany("UputnicePrimio")
                        .HasForeignKey("UpucenKodDoktoraId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("HealthCare020.Core.Entities.Doktor", "UputioDoktor")
                        .WithMany("UputniceUputio")
                        .HasForeignKey("UputioDoktorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("HealthCare020.Core.Entities.ZahtevZaPosetu", b =>
                {
                    b.HasOne("HealthCare020.Core.Entities.PacijentNaLecenju", "PacijentNaLecenju")
                        .WithMany()
                        .HasForeignKey("PacijentNaLecenjuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HealthCare020.Core.Entities.ZahtevZaPregled", b =>
                {
                    b.HasOne("HealthCare020.Core.Entities.Doktor", "Doktor")
                        .WithMany("ZahteviZaPregled")
                        .HasForeignKey("DoktorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("HealthCare020.Core.Entities.Pacijent", "Pacijent")
                        .WithMany("ZahteviZaPregled")
                        .HasForeignKey("PacijentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("HealthCare020.Core.Entities.Uputnica", "Uputnica")
                        .WithMany()
                        .HasForeignKey("UputnicaId");
                });

            modelBuilder.Entity("HealthCare020.Core.Entities.ZdravstvenaKnjizica", b =>
                {
                    b.HasOne("HealthCare020.Core.Entities.Doktor", "Doktor")
                        .WithMany()
                        .HasForeignKey("DoktorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HealthCare020.Core.Entities.LicniPodaci", "LicniPodaci")
                        .WithMany()
                        .HasForeignKey("LicniPodaciId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
